generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider                              = "node node_modules/prisma-nestjs-graphql"
  output                                = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_input                = "true"
  fields_Validator_from                 = "class-validator"
  decorate_1_type                       = "Create*Args"
  decorate_1_field                      = data
  decorate_1_name                       = ValidateNested
  decorate_1_from                       = "class-validator"
  decorate_1_arguments                  = "[]"
  decorate_2_type                       = "Create*Args"
  decorate_2_field                      = data
  decorate_2_name                       = Type
  decorate_2_from                       = "class-transformer"
  decorate_2_arguments                  = "['() => {propertyType.0}']"
  noAtomicOperations                    = true
  purgeOutput                           = true
  requireSingleFieldsInWhereUniqueInput = true
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  /// @Field(() => ID)
  id                 Int       @id @default(autoincrement())
  /// @Validator.@IsEmail()
  email              String    @unique
  /// @Validator.IsNotEmpty()
  name               String
  /// @HideField()
  /// @Validator.MinLength(8)
  password           String
  /// @HideField({ input: true, output: true })
  createdAt          DateTime  @default(dbgenerated("NOW()")) @db.Timestamp(0)
  /// @HideField({ input: true, output: true })
  updatedAt          DateTime  @default(dbgenerated("NOW() ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp(0)
  /// @Field(() => Authority)
  authority          Authority @default(THIRD)
  /// @HideField({ input: true, output: true })
  hashedRefreshToken String?
}

model OrderEntry {
  /// @Field(() => ID)
  id           Int            @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  makerCd      String
  /// @HideField({ input: true, output: true })
  createdAt    DateTime       @default(dbgenerated("NOW()")) @db.Timestamp(0)
  /// @HideField({ input: true, output: true })
  updatedAt    DateTime       @default(dbgenerated("NOW() ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp(0)
  maker        Maker          @relation(fields: [makerCd], references: [makerCd])
  orderRequest OrderRequest[]

  @@index([makerCd], map: "OrderEntry_makerCd_fkey")
}

model OrderRequest {
  /// @Field(() => ID)
  id                 Int                       @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  containerNo        Int
  /// @Validator.IsNotEmpty()
  orderRequestNo     String
  /// @Validator.IsNotEmpty()
  deliveryDate       DateTime                  @db.Date
  /// @Validator.IsNotEmpty()
  poRequestDate      DateTime?                 @db.Date
  /// @Field(() => DeliveryPort)
  deliveryPort       OrderRequest_deliveryPort @default(OTHER)
  /// @Field(() => PoStatus)
  poStatus           PoStatus                  @default(NOTISSUED)
  /// @Validator.IsNotEmpty()
  discarded          Boolean                   @default(false)
  /// @HideField({ input: true, output: true })
  createdAt          DateTime                  @default(dbgenerated("NOW()")) @db.Timestamp(0)
  /// @HideField({ input: true, output: true })
  updatedAt          DateTime                  @default(dbgenerated("NOW() ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp(0)
  /// @Validator.IsNotEmpty()
  orderEntryId       Int
  orderEntry         OrderEntry                @relation(fields: [orderEntryId], references: [id])
  orderRequestDetail OrderRequestDetail[]

  @@index([deliveryDate])
  @@index([orderEntryId], map: "OrderRequest_orderEntryId_fkey")
}

model OrderRequestDetail {
  /// @Field(() => ID)
  id              Int          @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  prodCd          String       @db.VarChar(20)
  /// @Validator.IsNotEmpty()
  orderQuantity   Int
  ssp             Float?
  cbm             Float?
  /// @Validator.IsNotEmpty()
  wasOrderAlerted Boolean      @default(false)
  /// @HideField({ input: true, output: true })
  createdAt       DateTime     @default(dbgenerated("NOW()")) @db.Timestamp(0)
  /// @HideField({ input: true, output: true })
  updatedAt       DateTime     @default(dbgenerated("NOW() ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp(0)
  /// @Validator.IsNotEmpty()
  orderRequestId  Int
  orderRequest    OrderRequest @relation(fields: [orderRequestId], references: [id])
  product         Product      @relation(fields: [prodCd], references: [prodCd])

  @@index([orderRequestId], map: "OrderRequestDetail_orderRequestId_fkey")
  @@index([prodCd], map: "OrderRequestDetail_prodCd_fkey")
}

model Maker {
  /// @Validator.IsNotEmpty()
  makerCd    String       @unique
  /// @Validator.IsNotEmpty()
  makerName  String
  leadtime   Int
  /// @Validator.IsNotEmpty()
  isValid    Boolean      @default(true)
  /// @HideField({ input: true, output: true })
  createdAt  DateTime     @default(dbgenerated("NOW()")) @db.Timestamp(0)
  /// @HideField({ input: true, output: true })
  updatedAt  DateTime     @default(dbgenerated("NOW() ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp(0)
  orderEntry OrderEntry[]
  product    Product[]
}

model Product {
  /// @Validator.IsNotEmpty()
  prodCd             String               @unique
  /// @Validator.IsNotEmpty()
  makerCd            String               @db.VarChar(20)
  /// @Validator.IsNotEmpty()
  prodName           String
  ssp180Days         Float?
  carton3SideSize    Float?
  minOrderQuantity   Int
  /// @Validator.IsNotEmpty()
  isValid            Boolean              @default(true)
  /// @HideField({ input: true, output: true })
  createdAt          DateTime             @default(dbgenerated("NOW()")) @db.Timestamp(0)
  /// @HideField({ input: true, output: true })
  updatedAt          DateTime             @default(dbgenerated("NOW() ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp(0)
  maker              Maker                @relation(fields: [makerCd], references: [makerCd])
  orderArrivalData   OrderArrivalData[]
  orderRequestDetail OrderRequestDetail[]

  @@index([makerCd], map: "Product_makerCd_fkey")
}

model OrderArrivalData {
  /// @Field(() => ID)
  id            Int          @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  prodCd        String
  /// @Validator.IsNotEmpty()
  orderQuantity Int
  deliveryDate  DateTime?    @db.Date
  /// @Field(() => DeliveryPort)
  deliveryPort  DeliveryPort @default(OTHER)
  /// @HideField({ input: true, output: true })
  createdAt     DateTime     @default(dbgenerated("NOW()")) @db.Timestamp(0)
  /// @HideField({ input: true, output: true })
  updatedAt     DateTime     @default(dbgenerated("NOW() ON UPDATE CURRENT_TIMESTAMP")) @db.Timestamp(0)
  product       Product      @relation(fields: [prodCd], references: [prodCd])

  @@index([prodCd], map: "OrderArrivalData_prodCd_fkey")
}

enum Authority {
  FIRST
  SECOND
  THIRD
}

enum DeliveryPort {
  INZAI
  TOYOKAWA
  KOBE
  MOJI
  OTHER
}

enum PoStatus {
  NOTISSUED
  ISSUED
}

enum OrderRequest_deliveryPort {
  INZAI
  TOYOKAWA
  KOBE
  MOJI
  OTHER
}
